// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`for the off.json config alias.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Style/GlobalVars
class AliasTest < Minitest::Test
  def test_plain_alias
    assert_equal \\"plain alias\\", foo
  end

  def test_global_alias
    $bar = \\"global alias\\"
    assert_equal \\"global alias\\", $foo
  end

  private

  def baz
    \\"plain alias\\"
  end

  alias bar baz # inline comment
  alias foo bar
  alias $foo $bar
end
# rubocop:enable Style/GlobalVars
"
`;

exports[`for the off.json config array.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/Void

[]

[1, 2, 3]

%w[a b c]

[\\"a\\", \\"b c\\", \\"d\\"]

%i[a b c]

[:a, :\\"b c\\", :d]

%w[a b c]

%i[a b c]

%W[a#{a}a b#{b}a c#{c}c]

%I[a#{a}a b#{b}b c#{c}c]

# rubocop:disable Lint/UnneededSplatExpansion
[1, 2, *[3, 4], 5, 6]
# rubocop:enable Lint/UnneededSplatExpansion

[
  super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_long,
  [
    super_super_super_super_super_super_super_super_super_super_super_long,
    super_super_super_super_super_super_super_super_super_super_super_long
  ]
]

a[1]

a[
  super_super_super_super_super_super_super_super_super_super_super_super_sulong
]

a[1] = 2

a[
  super_super_super_super_super_super_super_super_super_super_super_super_sulong
] =
  super_super_super_super_super_super_super_super_super_super_super_super_long

a[1] = [
  super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_long
]

a[1] = [
  # abc
  %w[abc]
]

# rubocop:enable Lint/Void
"
`;

exports[`for the off.json config assign.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/UselessAssignment, Style/ParallelAssignment

a = 1

a =
  begin
    2
  end

a, b, c = [1, 2, 3]

a = 1, 2, 3

a, b, c = 1, 2, 3

a, b, c = 1, 2, 3

a, b, c = 1, 2, 3

a, b, c = 1, 2, 3

a, *b = 1, 2, 3

a, *b, c, d = 1, 2, 3

a, * = 1, 2, 3

a = *a

(a, b), c = [1, 2], 3

* = [1, 2, 3]

*, a = [1, 2, 3]

super_super_super_long, super_super_super_long, super_super_super_long =
  super_super_super_super_super_long,
  super_super_super_super_super_long,
  super_super_super_super_super_long

a ||= 1

a ||=
  super_super_super_super_super_super_super_super_super_super_super_super_long

a = [
  super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_long
]

a = {
  :a => super_super_super_super_super_super_super_super_super_super_long,
  :b => super_super_super_super_super_super_super_super_super_super_long,
  :c => super_super_super_super_super_super_super_super_super_super_long
}

# rubocop:disable Lint/UnneededCopDisableDirective
# rubocop:disable Layout/MultilineMethodCallIndentation
# I know, I know
a = [super_super_super_super_long, super_super_super_super_long].sort

a = { :a => super_super_super_super_long, :b => super_super_super_super_long }
  .sort
# rubocop:enable Layout/MultilineMethodCallIndentation
# rubocop:enable Lint/UnneededCopDisableDirective

a.a = 1

super_super_super_long.super_super_super_super_super_super_super_long =
  super_super_super_super_super_super_super_super_super_super_super_long

# rubocop:enable Lint/UselessAssignment, Style/ParallelAssignment
"
`;

exports[`for the off.json config binary.rb matches expected output 1`] = `
"# frozen_string_literal: true

class BinaryTest < Minitest::Test
  def test_unbroken
    value = true

    assert(value && value && value)
  end

  def test_broken
    super_super_super_super_super_long = true

    assert(
      super_super_super_super_super_long &&
        super_super_super_super_super_long &&
        super_super_super_super_super_long
    )
  end
end
"
`;

exports[`for the off.json config blocks.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/UnusedBlockArgument

loop { 1 }

loop { 1 }

loop do
  # foobar
end

port ENV.fetch(\\"PORT\\") { 3000 }

test \\"foobar\\" do
end

te.st \\"foobar\\" do
end

test \\"foobar\\" do
  foobar
end

te.st \\"foobar\\" do
  foobar
end

test \\"foobar\\", &:to_s

te.st \\"foobar\\", &:to_s

loop do
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

loop { super_super_super_super_super_super_super_super_super_super_super_long }

loop { |i| 1 }

loop { |i| i }

loop { |*| i }

loop { |(a, b)| i }

loop { |a, (b, c), d, *e| i }

loop do |i|
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

loop { |i| super_super_super_super_super_super_super_super_super_super_long }

loop(&:to_s)

loop(&:to_s)

loop do |i|
  i.to_s
  i.next
end

loop { |i| i.to_s :db }

loop { |i, j| i.to_s }

[1, 2, 3].each do |i|
  p i
end

def change
  change_table :foo do
    column :bar
  end
end

foo \\"foo\\", &:to_s

target.method object.map do |arg|
  arg * 2
end

# from ruby test/ruby/test_call.rb
assert_nil(
  (
    \\"a\\".sub! \\"b\\" do
    end&.foo do
    end
  )
)

# rubocop:enable Lint/UnusedBlockArgument
"
`;

exports[`for the off.json config break.rb matches expected output 1`] = `
"# frozen_string_literal: true

[].each { break }

[].each { break 1 }

[].each { break 1 }

[].each { break 1, 2 }
"
`;

exports[`for the off.json config case.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/EmptyWhen, Style/EmptyCaseCondition

case
when a
  1
end

case a
when b
  1
end

case a
when b, c
  1
end

case a
when b
when c
  1
end

case a
when b
  1
when c
  2
end

case a
when b
  1
else
  2
end

# rubocop:enable Lint/EmptyWhen, Style/EmptyCaseCondition
"
`;

exports[`for the off.json config class.rb matches expected output 1`] = `
"# frozen_string_literal: true

module Pret
  module Tier
    # object documentation
    class Object; end

    # second object
    # documentation
    class Object; end

    # third object
    # documentation
    class Object
      attr_accessor :foo
    end

    class Object < BasicObject; end

    class Object < BasicObject; end

    class Object < BasicObject
      # inside class documentation
      attr_accessor :bar
    end

    class SuperSuperSuperSuperSuperSuperSuperSuperSuperSuperSuperLongClassName
    end

    module SuperSuperSuperSuperSuperSuperSuperSuperSuperSuperSuperLongModName
    end

    class << self
      # method documentation
      def method1; end

      def method2; end

      def method3; end

      def method_with_a_long_name1; end

      def method_with_a_long_name2; end

      def method_with_a_long_name3; end

      undef method1
      undef method2, method3
      undef method_with_a_long_name1,
            method_with_a_long_name2,
            method_with_a_long_name3
    end

    module Prettier; end

    module Prettier; end

    module Prettier
      # inside module documentation
      attr_accessor :foo
    end
  end
end

Pret::Tier::Object # rubocop:disable Lint/Void
Pret::TIER = \\"config\\".to_s

::Pret::Tier::Object # rubocop:disable Lint/Void
::PRET = \\"config\\".to_s
"
`;

exports[`for the off.json config comments.rb matches expected output 1`] = `
"# frozen_string_literal: true

# this is a comment at
# the beginning of the file
# rubocop:disable Lint/Void

loop do
  # this is the only statement
  # inside this loop
end

loop do
  # this is the first statement
  # inside this loop
  foo
end

loop do
  foo
  # this is the last statement
  # inside this loop
end

def foo
  # these are the only statements
  # inside this method
end

class Foo
  # these are the only statements
  # inside this class
end

module Foo
  # these are the only statements
  # inside this module
end

module Foo
  class Foo
    def foo
      # this comment is inside a method
    end

    def bar
      print message # this is an inline comment
    end

    def self.foo
      # this comment is inside a self method
    end
  end
end

foo # this is an inline comment
bar # this is another inline comment

foo \\"bar\\" # this is an inline comment

[
  # these are comments
  # inside of an array
  foo,
  # inside of an array
  bar
]

{
  # these are comments
  :foo => \\"bar\\",
  # inside of a hash
  :bar => \\"baz\\"
}

foo # inline comment inside of a dot
  .bar

Foo.where(:foo => bar, :bar => baz).to_a.find do |foo|
  # This is a comment
  foo.foo == bar.foo
end

if foo
  # this is a comment in an if
  bar
end

unless foo
  # this is a comment in an unless
  bar
end

while foo
  # this is a comment at the beginning of a while
  bar
end

while foo
  bar
  # this is a comment at the end of a while
end

until foo
  # this is a comment at the beginning of a until
  bar
end

until foo
  bar
  # this is a comment at the end of a until
end

case foo
when bar
  # this is a comment at the beginning of a when
  1
when baz
  2
  # this is a comment at the end of a when
end

begin
  # comment at the beginning of a begin
  1
rescue StandardError
  # comment at the beginning of a rescue
  2
ensure
  # comment at the end of a rescue
  3
end

# rubocop:enable Lint/Void
# this is a comment
# at the end of the file

__END__
    /‾‾‾‾‾\\\\  /‾‾‾‾‾\\\\  /‾‾‾‾/ /‾‾‾‾‾‾/ /‾‾‾‾‾‾/ /‾‾‾‾‾‾/ /‾‾‾‾/ /‾‾‾‾‾\\\\
   / /‾‾/ / / /‾‾/ / / /‾‾‾  ‾‾/ /‾‾  ‾‾/ /‾‾  ‾‾/ /‾‾ / /‾‾‾ / /‾‾/ /
  /  ‾‾‾ / /  ‾‾‾_/ / _‾/     / /      / /      / /   / _‾/  /  ‾‾‾_/
 / /‾‾‾‾‾ / /‾\\\\ \\\\  / /__     / /      / /    __/ /_  / /__  / /‾\\\\ \\\\
/_/      /_/  /_/ /____/    /_/      /_/    /_____/ /____/ /_/  /_/
"
`;

exports[`for the off.json config defined.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/Void

defined?(a) # first

defined?(a) # second

defined?(
  super_super_super_super_super_super_super_super_super_super_super_super_long
)

defined?(
  super_super_super_super_super_super_super_super_super_super_super_super_long
)

defined?(
  super_super_super_super_super_super_super_super_super_super_super_super_long
)

defined?(a) # third

# rubocop:enable Lint/Void
"
`;

exports[`for the off.json config embdoc.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Style/BlockComments

=begin
this is

some really

long documentation
that is contained
in an embdoc
=end

class Foo
=begin
this is an embdoc inside a class
=end
end

module Foo
  class Foo
=begin
this is an embdoc even more indented
=end
  end
end

# rubocop:enable Style/BlockComments
"
`;

exports[`for the off.json config encoding.rb matches expected output 1`] = `
"# -*- encoding: binary -*-
# frozen_string_literal: true

# rubocop:disable Lint/Void, Style/AsciiComments

# il était
:il_était
\\"ひらがな\\"
/ひらがな/

# rubocop:enable Lint/Void, Style/AsciiComments
"
`;

exports[`for the off.json config hash.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/Void

{}

{ :a => \\"a\\", :b => \\"b\\", :c => \\"c\\" }

{ :a => \\"a\\", :b => \\"b\\", :c => \\"c\\" }

{ Foo => 1, Bar => 2 }

{
  :super_super_super_super_super_super_super_super_long =>
    super_super_super_super_super_super_super_super_long,
  :super_super_super_super_super_super_super_super_super_long => {
    :super_super_super_super_super_super_super_super_long =>
      super_super_super_super_super_super_super_super_long
  }
}

foo :abc => true # some comment

foobar :alpha => alpha,
       :beta => beta,
       :gamma => gamma,
       :delta => delta,
       :epsilon => epsilon,
       :zeta => zeta
foobar(
  :alpha => alpha,
  :beta => beta,
  :gamma => gamma,
  :delta => delta,
  :epsilon => epsilon,
  :zeta => zeta
)

# rubocop:enable Lint/Void
"
`;

exports[`for the off.json config hooks.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Style/BeginBlock, Style/EndBlock

BEGIN { p \\"begin\\" }

BEGIN { p \\"begin\\" }

BEGIN {
  super_super_super_super_super_super_super_super_super_super_super_super_long
}

BEGIN {
  super_super_super_super_super_super_super_super_super_super_super_super_long
}

END { p \\"end\\" }

END { p \\"end\\" }

END {
  super_super_super_super_super_super_super_super_super_super_super_super_long
}

END {
  super_super_super_super_super_super_super_super_super_super_super_super_long
}

# rubocop:enable Style/BeginBlock, Style/EndBlock
"
`;

exports[`for the off.json config if.rb matches expected output 1`] = `
"# frozen_string_literal: true

if a
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

# rubocop:disable Style/Not, Style/NegatedIf, Lint/EmptyExpression
if not a
  b
end

# from ruby test/ruby/test_not.rb
assert_equal(true, (not ()))
# rubocop:enable Style/Not, Style/NegatedIf, Lint/EmptyExpression

if a
  break # comment
end

if a

else
  b
end

if a
  1
elsif b
  2
end

if a
  super_super_super_super_super_super_super_super_super_super_super_long
else
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

if a
  1
elsif b
  2
elsif c
  3
else
  4
end

unless a
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

# rubocop:disable Style/UnlessElse
unless a
  super_super_super_super_super_super_super_super_super_super_super_long
else
  super_super_super_super_super_super_super_super_super_super_super_super_long
end
# rubocop:enable Style/UnlessElse

if a
  1
end

if super_super_super_super_super_super_super_super_super_super_super_super_long
  1
end

unless a
  1
end

unless super_super_super_super_super_super_super_super_super_super_super_suplong
  1
end

a ? 1 : 2

a ? 2 : 1

a ? 1 : 2
if a
  super_super_super_super_super_super_super_super_super_super_super_long
else
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

if a
  b 1
else
  b(2)
end

if a
  b(1)
else
  b 2
end

a b do
  if a
    a \\"foo\\"
  else
    b
  end
end

if Some::Constant
   .super_super_super_super_super_super_super_super_super_super_long
  1
elsif Some::Constant
      .super_super_super_super_super_super_super_super_super_super_long
  2
end

unless Some::Constant
       .super_super_super_super_super_super_super_super_super_super_long
  1
end
"
`;

exports[`for the off.json config kwargs.rb matches expected output 1`] = `
"# frozen_string_literal: true

class KwargsTest < Minitest::Test
  def test_kwargs
    assert_equal 10, add(:alpha => 1, :beta => 2, :gamma => 3, :delta => 4)

    args = { :alpha => 1, :beta => 2, :gamma => 3 }
    assert_equal 10, add(**args, :delta => 4)
  end

  private

  def add(alpha:, beta:, gamma: 1, delta: 2)
    alpha + beta + gamma + delta
  end
end
"
`;

exports[`for the off.json config lambda.rb matches expected output 1`] = `
"# frozen_string_literal: true

-> { 1 }

->(a, b, c) { a + b + c }

lambda do
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

lambda do |a, b, c|
  a + b + c + super_super_super_super_super_super_super_super_super_long
end

a.call(1, 2, 3)

a.call(1, 2, 3)

a[]

a[1, 2, 3]

->(a) { a }

-> { 1 }

command :foobar, ->(argument) { argument + argument }
comm.and :foobar, ->(argument) { argument + argument }

command :fooooooooooooobaaaaaaarrrrr,
        lambda do |argument|
          argument + argument + argument + argument + argument + argument
        end
comm.and :fooooooooooooobaaaaaaarrrrr,
         lambda do |argument|
           argument + argument + argument + argument + argument + argument
         end
"
`;

exports[`for the off.json config layout.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/Void

1

def foobar
  2

  3
  4
  5

  6
end

7
8
9

10

# rubocop:enable Lint/Void
"
`;

exports[`for the off.json config method.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/DuplicateMethods, Lint/UnusedMethodArgument
# rubocop:disable Metrics/ParameterLists

def foo; end

def foo(); end

def foo(alpha); end

def foo(alpha); end

def self.foo; end

def self.foo(); end

def self.foo(alpha); end

def self.foo(alpha); end

def foo(alpha, beta, *gamma, delta, epsilon:, zeta:, eta: 1, **theta, &block)
  \\"what\\"
end

def foo(
  alpha:,
  beta:,
  gamma:,
  delta:,
  epsilon:,
  zeta:,
  eta:,
  theta:,
  iota:,
  kappa:,
  lambda:
)
  \\"what\\"
end

def foo(alpha)
  1
end

def foo(*); end

def foo(**); end

foo

foo(1)
foo(1, 2)
foo(1, 2, *abc)
foo(1, 2, *abc, 3, 4)
foo(
  aaaaaaa,
  bbbbbbb,
  ccccccc,
  ddddddd,
  eeeeeee,
  fffffff,
  ggggggg,
  hhhhhhh,
  iiiiiii
)
foo(
  aaaaaaa,
  bbbbbbb,
  ccccccc,
  ddddddd,
  eeeeeee,
  fffffff,
  ggggggg,
  hhhhhhh,
  iiiiiii
)
foo(
  aaaaaaa,
  bbbbbbb,
  ccccccc,
  ddddddd,
  eeeeeee,
  fffffff,
  ggggggg,
  hhhhhhh,
  &block
)

foo aaaaaaa,
    bbbbbbb,
    ccccccc,
    ddddddd,
    eeeeeee,
    fffffff,
    ggggggg,
    hhhhhhh,
    iiiiiii
foo.foo aaaaaaa,
        bbbbbbb,
        ccccccc,
        ddddddd,
        eeeeeee,
        fffffff,
        ggggggg,
        hhhhhhh,
        iiiiiii

foo(*bar)
foo(**baz)
foo(&block)

foo(*bar, &block)
foo(**baz, &block)
foo(*bar, **baz, &block)

foo(:h => 1, **bar)
foo(**bar, :h => 1)
foo(:h => 1, **bar, :i => 2)

Foo.foo
foo&.foo

# rubocop:enable Lint/DuplicateMethods, Lint/UnusedMethodArgument
# rubocop:enable Metrics/ParameterLists
"
`;

exports[`for the off.json config next.rb matches expected output 1`] = `
"# frozen_string_literal: true

class NextTest < Minitest::Test
  def test_no_args
    result = [1, 2, 3].map { next }

    assert_equal [nil, nil, nil], result
  end

  def test_one_arg_no_parens
    result = [1, 2, 3].map { next 1 }

    assert_equal [1, 1, 1], result
  end

  def test_one_arg_with_parens
    result = [1, 2, 3].map { next 1 }

    assert_equal [1, 1, 1], result
  end

  def test_multi_args_no_parens
    result = [1, 2, 3].map { next 1, 2 }

    assert_equal [[1, 2], [1, 2], [1, 2]], result
  end
end
"
`;

exports[`for the off.json config numbers.rb matches expected output 1`] = `
"# frozen_string_literal: true

class NumbersTest < Minitest::Test
  def test_numbers
    assert_equal_str \\"123\\", 123
    assert_equal_str \\"-123\\", -123
    assert_equal_str \\"1123\\", 1_123
    assert_equal_str \\"-543\\", -543
    assert_equal_str \\"123456789123456789\\", 123_456_789_123_456_789
  end

  def test_floats
    assert_equal_str \\"123.45\\", 123.45
    assert_equal_str \\"0.0012\\", 1.2e-3
  end

  def test_bases
    assert_equal_str \\"43707\\", 0xaabb
    assert_equal_str \\"255\\", 0o377
    assert_equal_str \\"-10\\", -0b1010
    assert_equal_str \\"9\\", 0b001_001
  end

  private

  def assert_equal_str(expected, value)
    assert_equal expected, value.to_s
  end
end
"
`;

exports[`for the off.json config ranges.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/UselessAssignment

dot2 = 1..2 # dot2
dot3 = 3...4 # dot3

# rubocop:enable Lint/UselessAssignment
"
`;

exports[`for the off.json config regexp.rb matches expected output 1`] = `
"# frozen_string_literal: true

class RegexpTest < Minitest::Test
  def test_default
    regexp = /abc/

    assert_match regexp, \\"abcde\\"
  end

  def test_braces
    regexp = /abc/

    assert_match regexp, \\"abcde\\"
  end

  def test_braces_with_slashes
    regexp = %r{a/b/c}

    assert_match regexp, \\"a/b/c/d/e\\"
  end

  def test_slashes
    regexp = /abc/

    assert_match regexp, \\"abcde\\"
  end

  def test_brackets
    regexp = /abc/

    assert_match regexp, \\"abcde\\"
  end

  def test_parens
    regexp = /abc/

    assert_match regexp, \\"abcde\\"
  end

  def test_interpolation
    inter = \\"b\\"
    regexp = /a#{inter}c/

    assert_match regexp, \\"abcde\\"
  end

  def test_modifier
    regexp = /abc/i

    assert_match regexp, \\"ABCDE\\"
  end

  def test_brace_modifier
    regexp = /abc/i

    assert_match regexp, \\"ABCDE\\"
  end

  def test_global_interpolation
    \\"foo\\" =~ /foo/
    regexp = /#{$&}/

    assert_match regexp, \\"foobar\\"
  end

  def test_float
    float_pat = /\\\\A
      [[:digit:]]+ # 1 or more digits before the decimal point
      (\\\\.          # Decimal point
          [[:digit:]]+ # 1 or more digits after the decimal point
      )? # The decimal point and following digits are optional
    \\\\Z/x

    assert_match float_pat, \\"12.56\\"
  end
end
"
`;

exports[`for the off.json config rescue.rb matches expected output 1`] = `
"# frozen_string_literal: true

begin
  1
rescue ArgumentError
  retry
rescue NoMethodError => exception
  puts exception
  redo
rescue SyntaxError, NoMethodError
  2
rescue SomeSuperSuperLongError,
       SomeOtherSuperSuperLongError,
       OneLastSuperLongError
  3
rescue StandardError
  4
else
  5
ensure
  6
end

begin
  a
rescue StandardError
  nil
end

# from ruby spec/ruby/language/rescue_spec.rb
def foo
  a
rescue A, *B => e
  e
end
"
`;

exports[`for the off.json config return.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/UnneededCopDisableDirective
# rubocop:disable Style/GuardClause, Style/RedundantReturn

def foo
  if a
    return
  end
end

def bar
  if a
    return 1
  end
end

def baz
  if a
    return 1
  end
end

def qux
  if a
    return 1, 2
  end
end

def qax
  if a
    return foo :bar
  end
end

# rubocop:enable Style/GuardClause, Style/RedundantReturn
# rubocop:enable Lint/UnneededCopDisableDirective
"
`;

exports[`for the off.json config strings.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/UnneededCopDisableDirective
# rubocop:disable Lint/Void, Layout/IndentHeredoc, Lint/UselessAssignment
# rubocop:disable Layout/SpaceInsideStringInterpolation
# rubocop:disable Lint/LiteralInInterpolation, Layout/ClosingHeredocIndentation
# rubocop:disable Layout/ClosingParenthesisIndentation
# rubocop:disable Style/StringLiteralsInInterpolation

\\"a\\" # these are CHARs
?\\\\C-a
?\\\\M-a
?\\\\M-\\\\C-a

\\"\\"

\\"abc\\"

\\"abc's\\"

\\"abc\\"

\\"abc\\\\n\\"

\\"\\\\M-\\\\C-a\\"

\\"abc #{super} abc\\"

\\"#{abc} abc\\"

\\"{\\\\\\"abc\\\\\\": \\\\\\"foo\\\\nbar\\\\\\"}\\"

# rubocop:disable Style/Semicolon
\\"abc #{foo; bar} abc\\"
# rubocop:enable Style/Semicolon

\\"abc #{de} fghi #{jkl} mno\\"

\\"abc\\" \\\\
  \\"def\\" \\\\
  \\"ghi\\"

\\"abc #{\\"abc #{abc} abc\\"} abc\\"

{ \\"a\\" => 1 }

{ \\"a #{a}\\" => 1 }

:\\"abc#{abc}abc\\"

\`abc\`

\`super_super_super_super_super_super_super_super_super_super_super_super_s_long\`

<<-HERE
This is a straight heredoc!
HERE

<<-HERE
This is another straight heredoc, this time with interpolation!
#{interpolation}
So interpolated right now.
HERE

abc = <<-HERE
This is a straight heredoc on an assign!
HERE

<<-PARENT
This is a straight heredoc!
#{<<-CHILD
Why do I do this
CHILD
}
PARENT

<<~HERE
  This is a squiggly heredoc!
HERE

<<~HERE
    This is another squiggly heredoc, this time with interpolation!
    #{interpolation}
    So interpolated right now.
HERE

abc = <<~HERE
  This is a squiggly heredoc on an assign!
HERE

<<~PARENT
  This is a squiggly heredoc!
  #{<<~CHILD
      Why do I do this
    CHILD
}
PARENT

<<-GRAND
#{\\"interpolated\\"}
<<~PARENT
  #{\\"more interpolated\\"}
    <<-CHILD
      #{\\"what is going on\\"}
    CHILD
  #{\\"more interpolated\\"}
PARENT
#{\\"interpolated\\"}
GRAND

\\"abc \\\\\\"abc\\\\\\" abc\\"

# rubocop:enable Lint/Void, Layout/IndentHeredoc, Lint/UselessAssignment
# rubocop:enable Layout/SpaceInsideStringInterpolation
# rubocop:enable Lint/LiteralInInterpolation, Layout/ClosingHeredocIndentation
# rubocop:enable Layout/ClosingParenthesisIndentation
# rubocop:enable Style/StringLiteralsInInterpolation
# rubocop:enable Lint/UnneededCopDisableDirective
"
`;

exports[`for the off.json config super.rb matches expected output 1`] = `
"# frozen_string_literal: true

super

super()

super 1

super(1)

super 1, 2

super(1, 2)
"
`;

exports[`for the off.json config while.rb matches expected output 1`] = `
"# frozen_string_literal: true

while a
  1
end

while a
  1
end

while super_super_super_super_super_super_super_super_super_super_super_long
  1
end

while super_super_super_super_super_super_super_super_super_super_super_supelong
  1
end

until a
  1
end

until a
  1
end

until super_super_super_super_super_super_super_super_super_super_super_long
  1
end

until super_super_super_super_super_super_super_super_super_super_super_supelong
  1
end
"
`;

exports[`for the off.json config yield.rb matches expected output 1`] = `
"# frozen_string_literal: true

[1, 2, 3].each do |i|
  yield

  yield i

  yield(i)

  yield i, 2

  yield(i, 2)

  yield
end
"
`;

exports[`for the on.json config alias.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Style/GlobalVars
class AliasTest < Minitest::Test
  def test_plain_alias
    assert_equal 'plain alias', foo
  end

  def test_global_alias
    $bar = 'global alias'
    assert_equal 'global alias', $foo
  end

  private

  def baz
    'plain alias'
  end

  alias bar baz # inline comment
  alias foo bar
  alias $foo $bar
end
# rubocop:enable Style/GlobalVars
"
`;

exports[`for the on.json config array.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/Void

[]

[1, 2, 3]

%w[a b c]

['a', 'b c', 'd']

%i[a b c]

[:a, :\\"b c\\", :d]

%w[a b c]

%i[a b c]

%W[a#{a}a b#{b}a c#{c}c]

%I[a#{a}a b#{b}b c#{c}c]

# rubocop:disable Lint/UnneededSplatExpansion
[1, 2, *[3, 4], 5, 6]
# rubocop:enable Lint/UnneededSplatExpansion

[
  super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_long,
  [
    super_super_super_super_super_super_super_super_super_super_super_long,
    super_super_super_super_super_super_super_super_super_super_super_long,
  ],
]

a[1]

a[
  super_super_super_super_super_super_super_super_super_super_super_super_sulong
]

a[1] = 2

a[
  super_super_super_super_super_super_super_super_super_super_super_super_sulong
] =
  super_super_super_super_super_super_super_super_super_super_super_super_long

a[1] = [
  super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_long,
]

a[1] = [
  # abc
  %w[abc],
]

# rubocop:enable Lint/Void
"
`;

exports[`for the on.json config assign.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/UselessAssignment, Style/ParallelAssignment

a = 1

a =
  begin
    2
  end

a, b, c = [1, 2, 3]

a = 1, 2, 3

a, b, c = 1, 2, 3

a, b, c = 1, 2, 3

a, b, c = 1, 2, 3

a, b, c = 1, 2, 3

a, *b = 1, 2, 3

a, *b, c, d = 1, 2, 3

a, * = 1, 2, 3

a = *a

(a, b), c = [1, 2], 3

* = [1, 2, 3]

*, a = [1, 2, 3]

super_super_super_long, super_super_super_long, super_super_super_long =
  super_super_super_super_super_long,
  super_super_super_super_super_long,
  super_super_super_super_super_long

a ||= 1

a ||=
  super_super_super_super_super_super_super_super_super_super_super_super_long

a = [
  super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_long,
]

a = {
  a: super_super_super_super_super_super_super_super_super_super_long,
  b: super_super_super_super_super_super_super_super_super_super_long,
  c: super_super_super_super_super_super_super_super_super_super_long,
}

# rubocop:disable Lint/UnneededCopDisableDirective
# rubocop:disable Layout/MultilineMethodCallIndentation
# I know, I know
a = [super_super_super_super_long, super_super_super_super_long].sort

a = { a: super_super_super_super_long, b: super_super_super_super_long }.sort
# rubocop:enable Layout/MultilineMethodCallIndentation
# rubocop:enable Lint/UnneededCopDisableDirective

a.a = 1

super_super_super_long.super_super_super_super_super_super_super_long =
  super_super_super_super_super_super_super_super_super_super_super_long

# rubocop:enable Lint/UselessAssignment, Style/ParallelAssignment
"
`;

exports[`for the on.json config binary.rb matches expected output 1`] = `
"# frozen_string_literal: true

class BinaryTest < Minitest::Test
  def test_unbroken
    value = true

    assert(value && value && value)
  end

  def test_broken
    super_super_super_super_super_long = true

    assert(
      super_super_super_super_super_long &&
        super_super_super_super_super_long &&
        super_super_super_super_super_long,
    )
  end
end
"
`;

exports[`for the on.json config blocks.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/UnusedBlockArgument

loop { 1 }

loop { 1 }

loop do
  # foobar
end

port ENV.fetch('PORT') { 3000 }

test 'foobar' do
end

te.st 'foobar' do
end

test 'foobar' do
  foobar
end

te.st 'foobar' do
  foobar
end

test 'foobar', &:to_s

te.st 'foobar', &:to_s

loop do
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

loop { super_super_super_super_super_super_super_super_super_super_super_long }

loop { |i| 1 }

loop { |i| i }

loop { |*| i }

loop { |(a, b)| i }

loop { |a, (b, c), d, *e| i }

loop do |i|
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

loop { |i| super_super_super_super_super_super_super_super_super_super_long }

loop(&:to_s)

loop(&:to_s)

loop do |i|
  i.to_s
  i.next
end

loop { |i| i.to_s :db }

loop { |i, j| i.to_s }

[1, 2, 3].each do |i|
  p i
end

def change
  change_table :foo do
    column :bar
  end
end

foo 'foo', &:to_s

target.method object.map do |arg|
  arg * 2
end

# from ruby test/ruby/test_call.rb
assert_nil(
  (
    'a'.sub! 'b' do
    end&.foo do
    end
  ),
)

# rubocop:enable Lint/UnusedBlockArgument
"
`;

exports[`for the on.json config break.rb matches expected output 1`] = `
"# frozen_string_literal: true

[].each { break }

[].each { break 1 }

[].each { break 1 }

[].each { break 1, 2 }
"
`;

exports[`for the on.json config case.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/EmptyWhen, Style/EmptyCaseCondition

case
when a
  1
end

case a
when b
  1
end

case a
when b, c
  1
end

case a
when b
when c
  1
end

case a
when b
  1
when c
  2
end

case a
when b
  1
else
  2
end

# rubocop:enable Lint/EmptyWhen, Style/EmptyCaseCondition
"
`;

exports[`for the on.json config class.rb matches expected output 1`] = `
"# frozen_string_literal: true

module Pret
  module Tier
    # object documentation
    class Object; end

    # second object
    # documentation
    class Object; end

    # third object
    # documentation
    class Object
      attr_accessor :foo
    end

    class Object < BasicObject; end

    class Object < BasicObject; end

    class Object < BasicObject
      # inside class documentation
      attr_accessor :bar
    end

    class SuperSuperSuperSuperSuperSuperSuperSuperSuperSuperSuperLongClassName
    end

    module SuperSuperSuperSuperSuperSuperSuperSuperSuperSuperSuperLongModName
    end

    class << self
      # method documentation
      def method1; end

      def method2; end

      def method3; end

      def method_with_a_long_name1; end

      def method_with_a_long_name2; end

      def method_with_a_long_name3; end

      undef method1
      undef method2, method3
      undef method_with_a_long_name1,
            method_with_a_long_name2,
            method_with_a_long_name3
    end

    module Prettier; end

    module Prettier; end

    module Prettier
      # inside module documentation
      attr_accessor :foo
    end
  end
end

Pret::Tier::Object # rubocop:disable Lint/Void
Pret::TIER = 'config'.to_s

::Pret::Tier::Object # rubocop:disable Lint/Void
::PRET = 'config'.to_s
"
`;

exports[`for the on.json config comments.rb matches expected output 1`] = `
"# frozen_string_literal: true

# this is a comment at
# the beginning of the file
# rubocop:disable Lint/Void

loop do
  # this is the only statement
  # inside this loop
end

loop do
  # this is the first statement
  # inside this loop
  foo
end

loop do
  foo
  # this is the last statement
  # inside this loop
end

def foo
  # these are the only statements
  # inside this method
end

class Foo
  # these are the only statements
  # inside this class
end

module Foo
  # these are the only statements
  # inside this module
end

module Foo
  class Foo
    def foo
      # this comment is inside a method
    end

    def bar
      print message # this is an inline comment
    end

    def self.foo
      # this comment is inside a self method
    end
  end
end

foo # this is an inline comment
bar # this is another inline comment

foo 'bar' # this is an inline comment

[
  # these are comments
  # inside of an array
  foo,
  # inside of an array
  bar,
]

{
  # these are comments
  foo: 'bar',
  # inside of a hash
  bar: 'baz',
}

foo # inline comment inside of a dot
  .bar

Foo.where(foo: bar, bar: baz).to_a.find do |foo|
  # This is a comment
  foo.foo == bar.foo
end

if foo
  # this is a comment in an if
  bar
end

unless foo
  # this is a comment in an unless
  bar
end

while foo
  # this is a comment at the beginning of a while
  bar
end

while foo
  bar
  # this is a comment at the end of a while
end

until foo
  # this is a comment at the beginning of a until
  bar
end

until foo
  bar
  # this is a comment at the end of a until
end

case foo
when bar
  # this is a comment at the beginning of a when
  1
when baz
  2
  # this is a comment at the end of a when
end

begin
  # comment at the beginning of a begin
  1
rescue StandardError
  # comment at the beginning of a rescue
  2
ensure
  # comment at the end of a rescue
  3
end

# rubocop:enable Lint/Void
# this is a comment
# at the end of the file

__END__
    /‾‾‾‾‾\\\\  /‾‾‾‾‾\\\\  /‾‾‾‾/ /‾‾‾‾‾‾/ /‾‾‾‾‾‾/ /‾‾‾‾‾‾/ /‾‾‾‾/ /‾‾‾‾‾\\\\
   / /‾‾/ / / /‾‾/ / / /‾‾‾  ‾‾/ /‾‾  ‾‾/ /‾‾  ‾‾/ /‾‾ / /‾‾‾ / /‾‾/ /
  /  ‾‾‾ / /  ‾‾‾_/ / _‾/     / /      / /      / /   / _‾/  /  ‾‾‾_/
 / /‾‾‾‾‾ / /‾\\\\ \\\\  / /__     / /      / /    __/ /_  / /__  / /‾\\\\ \\\\
/_/      /_/  /_/ /____/    /_/      /_/    /_____/ /____/ /_/  /_/
"
`;

exports[`for the on.json config defined.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/Void

defined?(a) # first

defined?(a) # second

defined?(
  super_super_super_super_super_super_super_super_super_super_super_super_long
)

defined?(
  super_super_super_super_super_super_super_super_super_super_super_super_long
)

defined?(
  super_super_super_super_super_super_super_super_super_super_super_super_long
)

defined?(a) # third

# rubocop:enable Lint/Void
"
`;

exports[`for the on.json config embdoc.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Style/BlockComments

=begin
this is

some really

long documentation
that is contained
in an embdoc
=end

class Foo
=begin
this is an embdoc inside a class
=end
end

module Foo
  class Foo
=begin
this is an embdoc even more indented
=end
  end
end

# rubocop:enable Style/BlockComments
"
`;

exports[`for the on.json config encoding.rb matches expected output 1`] = `
"# -*- encoding: binary -*-
# frozen_string_literal: true

# rubocop:disable Lint/Void, Style/AsciiComments

# il était
:il_était
'ひらがな'
/ひらがな/

# rubocop:enable Lint/Void, Style/AsciiComments
"
`;

exports[`for the on.json config hash.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/Void

{}

{ a: 'a', b: 'b', c: 'c' }

{ a: 'a', b: 'b', c: 'c' }

{ Foo => 1, Bar => 2 }

{
  super_super_super_super_super_super_super_super_long:
    super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_long: {
    super_super_super_super_super_super_super_super_long:
      super_super_super_super_super_super_super_super_long,
  },
}

foo abc: true # some comment

foobar alpha: alpha,
       beta: beta,
       gamma: gamma,
       delta: delta,
       epsilon: epsilon,
       zeta: zeta
foobar(
  alpha: alpha,
  beta: beta,
  gamma: gamma,
  delta: delta,
  epsilon: epsilon,
  zeta: zeta,
)

# rubocop:enable Lint/Void
"
`;

exports[`for the on.json config hooks.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Style/BeginBlock, Style/EndBlock

BEGIN { p 'begin' }

BEGIN { p 'begin' }

BEGIN {
  super_super_super_super_super_super_super_super_super_super_super_super_long
}

BEGIN {
  super_super_super_super_super_super_super_super_super_super_super_super_long
}

END { p 'end' }

END { p 'end' }

END {
  super_super_super_super_super_super_super_super_super_super_super_super_long
}

END {
  super_super_super_super_super_super_super_super_super_super_super_super_long
}

# rubocop:enable Style/BeginBlock, Style/EndBlock
"
`;

exports[`for the on.json config if.rb matches expected output 1`] = `
"# frozen_string_literal: true

if a
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

# rubocop:disable Style/Not, Style/NegatedIf, Lint/EmptyExpression
b if not a

# from ruby test/ruby/test_not.rb
assert_equal(true, (not ()))
# rubocop:enable Style/Not, Style/NegatedIf, Lint/EmptyExpression

if a
  break # comment
end

if a

else
  b
end

if a
  1
elsif b
  2
end

if a
  super_super_super_super_super_super_super_super_super_super_super_long
else
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

if a
  1
elsif b
  2
elsif c
  3
else
  4
end

unless a
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

# rubocop:disable Style/UnlessElse
unless a
  super_super_super_super_super_super_super_super_super_super_super_long
else
  super_super_super_super_super_super_super_super_super_super_super_super_long
end
# rubocop:enable Style/UnlessElse

1 if a

if super_super_super_super_super_super_super_super_super_super_super_super_long
  1
end

1 unless a

unless super_super_super_super_super_super_super_super_super_super_super_suplong
  1
end

a ? 1 : 2

a ? 2 : 1

a ? 1 : 2
if a
  super_super_super_super_super_super_super_super_super_super_super_long
else
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

if a
  b 1
else
  b(2)
end

if a
  b(1)
else
  b 2
end

a b do
  if a
    a 'foo'
  else
    b
  end
end

if Some::Constant
   .super_super_super_super_super_super_super_super_super_super_long
  1
elsif Some::Constant
      .super_super_super_super_super_super_super_super_super_super_long
  2
end

unless Some::Constant
       .super_super_super_super_super_super_super_super_super_super_long
  1
end
"
`;

exports[`for the on.json config kwargs.rb matches expected output 1`] = `
"# frozen_string_literal: true

class KwargsTest < Minitest::Test
  def test_kwargs
    assert_equal 10, add(alpha: 1, beta: 2, gamma: 3, delta: 4)

    args = { alpha: 1, beta: 2, gamma: 3 }
    assert_equal 10, add(**args, delta: 4)
  end

  private

  def add(alpha:, beta:, gamma: 1, delta: 2)
    alpha + beta + gamma + delta
  end
end
"
`;

exports[`for the on.json config lambda.rb matches expected output 1`] = `
"# frozen_string_literal: true

-> { 1 }

->(a, b, c) { a + b + c }

lambda do
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

lambda do |a, b, c|
  a + b + c + super_super_super_super_super_super_super_super_super_long
end

a.call(1, 2, 3)

a.call(1, 2, 3)

a[]

a[1, 2, 3]

->(a) { a }

-> { 1 }

command :foobar, ->(argument) { argument + argument }
comm.and :foobar, ->(argument) { argument + argument }

command :fooooooooooooobaaaaaaarrrrr,
        lambda do |argument|
          argument + argument + argument + argument + argument + argument
        end
comm.and :fooooooooooooobaaaaaaarrrrr,
         lambda do |argument|
           argument + argument + argument + argument + argument + argument
         end
"
`;

exports[`for the on.json config layout.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/Void

1

def foobar
  2

  3
  4
  5

  6
end

7
8
9

10

# rubocop:enable Lint/Void
"
`;

exports[`for the on.json config method.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/DuplicateMethods, Lint/UnusedMethodArgument
# rubocop:disable Metrics/ParameterLists

def foo; end

def foo(); end

def foo(alpha); end

def foo(alpha); end

def self.foo; end

def self.foo(); end

def self.foo(alpha); end

def self.foo(alpha); end

def foo(alpha, beta, *gamma, delta, epsilon:, zeta:, eta: 1, **theta, &block)
  'what'
end

def foo(
  alpha:,
  beta:,
  gamma:,
  delta:,
  epsilon:,
  zeta:,
  eta:,
  theta:,
  iota:,
  kappa:,
  lambda:
)
  'what'
end

def foo(alpha)
  1
end

def foo(*); end

def foo(**); end

foo

foo(1)
foo(1, 2)
foo(1, 2, *abc)
foo(1, 2, *abc, 3, 4)
foo(
  aaaaaaa,
  bbbbbbb,
  ccccccc,
  ddddddd,
  eeeeeee,
  fffffff,
  ggggggg,
  hhhhhhh,
  iiiiiii,
)
foo(
  aaaaaaa,
  bbbbbbb,
  ccccccc,
  ddddddd,
  eeeeeee,
  fffffff,
  ggggggg,
  hhhhhhh,
  iiiiiii,
)
foo(
  aaaaaaa,
  bbbbbbb,
  ccccccc,
  ddddddd,
  eeeeeee,
  fffffff,
  ggggggg,
  hhhhhhh,
  &block
)

foo aaaaaaa,
    bbbbbbb,
    ccccccc,
    ddddddd,
    eeeeeee,
    fffffff,
    ggggggg,
    hhhhhhh,
    iiiiiii
foo.foo aaaaaaa,
        bbbbbbb,
        ccccccc,
        ddddddd,
        eeeeeee,
        fffffff,
        ggggggg,
        hhhhhhh,
        iiiiiii

foo(*bar)
foo(**baz)
foo(&block)

foo(*bar, &block)
foo(**baz, &block)
foo(*bar, **baz, &block)

foo(h: 1, **bar)
foo(**bar, h: 1)
foo(h: 1, **bar, i: 2)

Foo.foo
foo&.foo

# rubocop:enable Lint/DuplicateMethods, Lint/UnusedMethodArgument
# rubocop:enable Metrics/ParameterLists
"
`;

exports[`for the on.json config next.rb matches expected output 1`] = `
"# frozen_string_literal: true

class NextTest < Minitest::Test
  def test_no_args
    result = [1, 2, 3].map { next }

    assert_equal [nil, nil, nil], result
  end

  def test_one_arg_no_parens
    result = [1, 2, 3].map { next 1 }

    assert_equal [1, 1, 1], result
  end

  def test_one_arg_with_parens
    result = [1, 2, 3].map { next 1 }

    assert_equal [1, 1, 1], result
  end

  def test_multi_args_no_parens
    result = [1, 2, 3].map { next 1, 2 }

    assert_equal [[1, 2], [1, 2], [1, 2]], result
  end
end
"
`;

exports[`for the on.json config numbers.rb matches expected output 1`] = `
"# frozen_string_literal: true

class NumbersTest < Minitest::Test
  def test_numbers
    assert_equal_str '123', 123
    assert_equal_str '-123', -123
    assert_equal_str '1123', 1_123
    assert_equal_str '-543', -543
    assert_equal_str '123456789123456789', 123_456_789_123_456_789
  end

  def test_floats
    assert_equal_str '123.45', 123.45
    assert_equal_str '0.0012', 1.2e-3
  end

  def test_bases
    assert_equal_str '43707', 0xaabb
    assert_equal_str '255', 0o377
    assert_equal_str '-10', -0b1010
    assert_equal_str '9', 0b001_001
  end

  private

  def assert_equal_str(expected, value)
    assert_equal expected, value.to_s
  end
end
"
`;

exports[`for the on.json config ranges.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/UselessAssignment

dot2 = 1..2 # dot2
dot3 = 3...4 # dot3

# rubocop:enable Lint/UselessAssignment
"
`;

exports[`for the on.json config regexp.rb matches expected output 1`] = `
"# frozen_string_literal: true

class RegexpTest < Minitest::Test
  def test_default
    regexp = /abc/

    assert_match regexp, 'abcde'
  end

  def test_braces
    regexp = /abc/

    assert_match regexp, 'abcde'
  end

  def test_braces_with_slashes
    regexp = %r{a/b/c}

    assert_match regexp, 'a/b/c/d/e'
  end

  def test_slashes
    regexp = /abc/

    assert_match regexp, 'abcde'
  end

  def test_brackets
    regexp = /abc/

    assert_match regexp, 'abcde'
  end

  def test_parens
    regexp = /abc/

    assert_match regexp, 'abcde'
  end

  def test_interpolation
    inter = 'b'
    regexp = /a#{inter}c/

    assert_match regexp, 'abcde'
  end

  def test_modifier
    regexp = /abc/i

    assert_match regexp, 'ABCDE'
  end

  def test_brace_modifier
    regexp = /abc/i

    assert_match regexp, 'ABCDE'
  end

  def test_global_interpolation
    'foo' =~ /foo/
    regexp = /#{$&}/

    assert_match regexp, 'foobar'
  end

  def test_float
    float_pat = /\\\\A
      [[:digit:]]+ # 1 or more digits before the decimal point
      (\\\\.          # Decimal point
          [[:digit:]]+ # 1 or more digits after the decimal point
      )? # The decimal point and following digits are optional
    \\\\Z/x

    assert_match float_pat, '12.56'
  end
end
"
`;

exports[`for the on.json config rescue.rb matches expected output 1`] = `
"# frozen_string_literal: true

begin
  1
rescue ArgumentError
  retry
rescue NoMethodError => exception
  puts exception
  redo
rescue SyntaxError, NoMethodError
  2
rescue SomeSuperSuperLongError,
       SomeOtherSuperSuperLongError,
       OneLastSuperLongError
  3
rescue StandardError
  4
else
  5
ensure
  6
end

begin
  a
rescue StandardError
  nil
end

# from ruby spec/ruby/language/rescue_spec.rb
def foo
  a
rescue A, *B => e
  e
end
"
`;

exports[`for the on.json config return.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/UnneededCopDisableDirective
# rubocop:disable Style/GuardClause, Style/RedundantReturn

def foo
  return if a
end

def bar
  return 1 if a
end

def baz
  return 1 if a
end

def qux
  return 1, 2 if a
end

def qax
  return foo :bar if a
end

# rubocop:enable Style/GuardClause, Style/RedundantReturn
# rubocop:enable Lint/UnneededCopDisableDirective
"
`;

exports[`for the on.json config strings.rb matches expected output 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/UnneededCopDisableDirective
# rubocop:disable Lint/Void, Layout/IndentHeredoc, Lint/UselessAssignment
# rubocop:disable Layout/SpaceInsideStringInterpolation
# rubocop:disable Lint/LiteralInInterpolation, Layout/ClosingHeredocIndentation
# rubocop:disable Layout/ClosingParenthesisIndentation
# rubocop:disable Style/StringLiteralsInInterpolation

'a' # these are CHARs
?\\\\C-a
?\\\\M-a
?\\\\M-\\\\C-a

''

'abc'

\\"abc's\\"

'abc'

\\"abc\\\\n\\"

\\"\\\\M-\\\\C-a\\"

\\"abc #{super} abc\\"

\\"#{abc} abc\\"

\\"{\\\\\\"abc\\\\\\": \\\\\\"foo\\\\nbar\\\\\\"}\\"

# rubocop:disable Style/Semicolon
\\"abc #{foo; bar} abc\\"
# rubocop:enable Style/Semicolon

\\"abc #{de} fghi #{jkl} mno\\"

'abc' \\\\
  'def' \\\\
  'ghi'

\\"abc #{\\"abc #{abc} abc\\"} abc\\"

{ 'a' => 1 }

{ \\"a #{a}\\" => 1 }

:\\"abc#{abc}abc\\"

\`abc\`

\`super_super_super_super_super_super_super_super_super_super_super_super_s_long\`

<<-HERE
This is a straight heredoc!
HERE

<<-HERE
This is another straight heredoc, this time with interpolation!
#{interpolation}
So interpolated right now.
HERE

abc = <<-HERE
This is a straight heredoc on an assign!
HERE

<<-PARENT
This is a straight heredoc!
#{<<-CHILD
Why do I do this
CHILD
}
PARENT

<<~HERE
  This is a squiggly heredoc!
HERE

<<~HERE
    This is another squiggly heredoc, this time with interpolation!
    #{interpolation}
    So interpolated right now.
HERE

abc = <<~HERE
  This is a squiggly heredoc on an assign!
HERE

<<~PARENT
  This is a squiggly heredoc!
  #{<<~CHILD
      Why do I do this
    CHILD
}
PARENT

<<-GRAND
#{'interpolated'}
<<~PARENT
  #{'more interpolated'}
    <<-CHILD
      #{'what is going on'}
    CHILD
  #{'more interpolated'}
PARENT
#{'interpolated'}
GRAND

'abc \\"abc\\" abc'

# rubocop:enable Lint/Void, Layout/IndentHeredoc, Lint/UselessAssignment
# rubocop:enable Layout/SpaceInsideStringInterpolation
# rubocop:enable Lint/LiteralInInterpolation, Layout/ClosingHeredocIndentation
# rubocop:enable Layout/ClosingParenthesisIndentation
# rubocop:enable Style/StringLiteralsInInterpolation
# rubocop:enable Lint/UnneededCopDisableDirective
"
`;

exports[`for the on.json config super.rb matches expected output 1`] = `
"# frozen_string_literal: true

super

super()

super 1

super(1)

super 1, 2

super(1, 2)
"
`;

exports[`for the on.json config while.rb matches expected output 1`] = `
"# frozen_string_literal: true

1 while a

1 while a

1 while super_super_super_super_super_super_super_super_super_super_super_long

while super_super_super_super_super_super_super_super_super_super_super_supelong
  1
end

1 until a

1 until a

1 until super_super_super_super_super_super_super_super_super_super_super_long

until super_super_super_super_super_super_super_super_super_super_super_supelong
  1
end
"
`;

exports[`for the on.json config yield.rb matches expected output 1`] = `
"# frozen_string_literal: true

[1, 2, 3].each do |i|
  yield

  yield i

  yield(i)

  yield i, 2

  yield(i, 2)

  yield
end
"
`;
